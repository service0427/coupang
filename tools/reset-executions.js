/**
 * Ïã§Ìñâ ÌöüÏàò Ï¥àÍ∏∞Ìôî ÎèÑÍµ¨
 */

const dbService = require('../lib/services/db-service');

async function resetExecutions() {
  try {
    await dbService.init();
    
    console.log('\nüìã Ïã§Ìñâ ÌöüÏàò Ï¥àÍ∏∞Ìôî');
    console.log('‚îÅ'.repeat(50));
    
    // Î™®Îì† ÌÇ§ÏõåÎìúÏùò Ïã§Ìñâ ÌöüÏàò Ï¥àÍ∏∞Ìôî
    const result = await dbService.query(`
      UPDATE test_keywords 
      SET current_executions = 0,
          last_executed_at = NULL
      WHERE is_active = true
    `);
    
    console.log(`‚úÖ ${result.rowCount}Í∞ú ÌÇ§ÏõåÎìúÏùò Ïã§Ìñâ ÌöüÏàò Ï¥àÍ∏∞Ìôî ÏôÑÎ£å`);
    
    // ÌôïÏù∏
    const checkResult = await dbService.query(`
      SELECT id, keyword, suffix, browser, current_executions, max_executions, proxy_server
      FROM test_keywords
      WHERE is_active = true AND os_type = 'win11' AND is_vmware = false
      ORDER BY id
    `);
    
    console.log('\nüìä ÌôúÏÑ± ÌÇ§ÏõåÎìú ÏÉÅÌÉú:');
    console.log('ID | ÌÇ§ÏõåÎìú     | suffix | Î∏åÎùºÏö∞Ï†Ä | Ïã§Ìñâ | ÌîÑÎ°ùÏãú');
    console.log('‚îÅ'.repeat(50));
    
    checkResult.rows.forEach(row => {
      console.log(
        `${row.id.toString().padEnd(2)} | ` +
        `${(row.keyword || '').substring(0, 10).padEnd(10)} | ` +
        `${(row.suffix || '').padEnd(6)} | ` +
        `${row.browser.padEnd(8)} | ` +
        `${row.current_executions}/${row.max_executions.toString().padEnd(3)} | ` +
        `${row.proxy_server || 'NULL'}`
      );
    });
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error.message);
  } finally {
    await dbService.close();
  }
}

// ÏßÅÏ†ë Ïã§Ìñâ
if (require.main === module) {
  resetExecutions();
}

module.exports = { resetExecutions };